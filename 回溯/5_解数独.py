# -*- coding: utf-8 -*-
# Author: LD
# CreateTime: 2022/4/11 23:39

"""
编写一个程序，通过填充空格来解决数独问题。

数独的解法需 遵循如下规则：

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

 

示例 1：


输入：board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
解释：输入的数独如上图所示，唯一有效的解决方案如下所示：


 

提示：

board.length == 9
board[i].length == 9
board[i][j] 是一位数字或者 '.'
题目数据 保证 输入数独仅有一个解

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/sudoku-solver
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""

from typing import List


class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        for i in range(9):
            for j in range(9):
                if board[i][j] != ".":
                    continue
                nums = self.get_possible_nums(i, j, board)
                if not nums:
                    return
                while nums:
                    num = nums.pop()
                    board[i][j] = num
                    self.solveSudoku(board)

                    if all("." not in board[x] for x in range(9)):
                        return
                    board[i][j] = "."

                    if not nums:
                        return


    def get_possible_nums(self, row, col, board):
        total = set([str(i) for i in range(1, 10)])
        # 3*3
        set1 = set()
        m = row //3
        n = col //3
        for i in range(m*3, m*3 + 3):
            for j in range(n*3, n*3 + 3):
                if board[i][j] != ".":
                    set1.add(board[i][j])

        # 整行
        set2 = set()
        for i in range(9):
            if board[row][i] != ".":
                set2.add(board[row][i])

        # 整列
        set3 = set()
        for i in range(9):
            if board[i][col] != ".":
                set3.add(board[i][col])
        return total - set1 -set2 - set3




b  = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]

s = Solution()
results = s.solveSudoku(b)
# for item in results:
#     print(item)

